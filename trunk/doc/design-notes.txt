                         How cvs2svn Works
                         =================

                       Theory and requirements
                       ------ --- ------------

There are two main problem converting a CVS repository to SVN:

- CVS does not record enough information to determine what actually
  happened to a repository.  For example, CVS does not record:

  - Which file modifications were part of the same commit

  - The timestamp of tag and branch creations

  - Exactly which revision was the base of a branch (there is
    ambiguity between x.y, x.y.2.0, x.y.4.0, etc.)

  - When the default branch was changed (for example, from a vendor
    branch back to trunk).

- The timestamps in a CVS archive are not reliable.  It can easily
  happen that timestamps are not even monotonic, and large errors (for
  example due to a failing server clock battery) are not unusual.

The absolutely crucial, sine qua non requirement of a conversion is
that the dependency relationships within a file be honored, mainly:

- A revision depends on its predecessor

- A branch creation depends on the revision from which it branched,
  and commits on the branch depend on the branch creation

- A tag creation depends on the revision being tagged

These dependencies are reliably defined in the CVS repository, and
they trump all others, so they are the scaffolding of the conversion.

Moreover, it is highly desirable that the timestamps of the SVN
commits be monotonically increasing.

Within these constraints we also want the results of the conversion to
resemble the history of the CVS repository as closely as possible.
For example, the set of file changes grouped together in an SVN commit
should be the same as the files changed within the corresponding CVS
commit, insofar as that can be achieved in a manner that is consistent
with the dependency requirements.  And the SVN commit timestamps
should recreate the time of the CVS commit as far as possible without
violating the monotonicity requirement.

The basic idea of the conversion is this: create the largest
conceivable changesets, then split up changesets as necessary to break
any cycles in the graph of changeset dependencies.  When all cycles
have been removed, then do a topological sort of the changesets (with
ambiguities resolved using CVS timestamps) to determine a
self-consistent changeset commit order.

The quality of the conversion (not in terms of correctness, but in
terms of minimizing the number of svn commits) is mostly determined by
the cleverness of the heuristics used to split up cycles.


                            Implementation
                            --------------

A cvs2svn run consists of a number of passes.  Each pass saves the
data it produces to files on disk, so that a) we don't hold huge
amounts of state in memory, and b) the conversion process is
resumable.

CollectRevsPass (formerly called pass1)
===============

The goal of this pass is to collect from the CVS files all of the data
that will be required for the conversion (except for the actual
contents of the files, which are read in OutputPass).

To collect this data, we walk over the repository, collecting data
about the RCS files into an instance of CollectData.  Each RCS file is
processed with rcsparse.parse(), which invokes callbacks from an
instance of cvs2svn's _FileDataCollector class (which is a subclass of
rcsparse.Sink).

For each RCS file, the first thing the parser encounters is the
administrative header, including the head revision, the principal
branch, symbolic names, RCS comments, etc.  The main thing that
happens here is that _FileDataCollector.define_tag() is invoked on
each symbolic name and its attached revision, so all the tags and
branches of this file get collected.

Next, the parser hits the revision summary section.  That's the part
of the RCS file that looks like this:

   1.6
   date 2002.06.12.04.54.12;    author captnmark;       state Exp;
   branches
        1.6.2.1;
   next 1.5;

   1.5
   date 2002.05.28.18.02.11;    author captnmark;       state Exp;
   branches;
   next 1.4;

   [...]

For each revision summary, _FileDataCollector.define_revision() is
invoked, recording that revision's metadata in various variables of
the _FileDataCollector class instance.

Next, the parser encounters the *real* revision data, which has the
log messages and file contents.  For each revision, it invokes
_FileDataCollector.set_revision_info(), which sets some more fields in
_RevisionData.  It also invokes RevisionRecorder.record_text(), which
gives the RevisionRecorder the chance to record the file text if
desired.  record_test() is allowed to return a token, which is carried
along with the CVSRevision data and can be used by RevisionReader to
retrieve the text in OutputPass.

When the parser is done with the file, it calls
_FileDataCollector.parse_completed(), which does some bookkeeping then
writes a record for each CVSItem to 'cvs2svn-cvs-items.pck'.

That's it -- the RCS file is done.

When every CVS file is done, CollectRevsPass is complete, and:

   - The basic information about each file (filename, path, etc) is
     written as a pickled CVSFile instance to 'cvs2svn-cvs-files.db'.

   - Information about each symbol seen, along with statistics like
     how often it was used as a branch or tag, is written as a pickled
     symbol_statistics._Stat object to
     'cvs2svn-symbol-statistics.pck'.  This includes the following
     information:

         ID NAME TAG_COUNT BRANCH_COUNT BRANCH_COMMIT_COUNT BLOCKERS

     where ID is a unique integer identifying this symbol, NAME is the
     symbol name, TAG_COUNT and BRANCH_COUNT are the number of CVS
     files on which this symbol was used as a tag or branch
     respectively, and BRANCH_COMMIT_COUNT is the number of files for
     which commits were made on a branch with the given name.
     BLOCKERS is a list of other symbols that were defined on branches
     named NAME.  (A symbol cannot be excluded if it has any blockers
     that are not also being excluded.)  These data are used to look
     for inconsistencies in the use of symbols under CVS and to decide
     which symbols can be excluded or forced to be branches and/or
     tags.

     For a multiproject conversion, distinct symbol records (and IDs)
     are created for symbols in separate projects, even if they have
     the same name.  This is to prevent symbols in separate projects
     from being filled at the same time.

   - Information about each revision, branch, and tag of each file is
     recorded as a pickled CVSItem (CVSRevision, CVSBranch, or CVSTag)
     to 'cvs2svn-cvs-items.pck'.  The revisions are sorted in groups,
     one per CVSFile.  But a multi-file commit will still be scattered
     all over the place.

   - Selected metadata for each CVS revision, including the author and
     log message, is written to 'cvs2svn-metadata.db'.  The purpose is
     twofold: first, to save space by not having to save this
     information multiple times, and second because CVS revisions that
     have the same metadata are candidates to be combined into an SVN
     changeset.

     First, an SHA digest is created for each set of metadata.  The
     digest is constructed so that CVSRevisions that can be combined
     are all mapped to the same digest.  CVSRevisions that were part
     of a single CVS commit always have a common author and log
     message, therefore these fields are always included in the
     digest.  Moreover:

     - if ctx.cross_project_commits is False, we avoid combining CVS
       revisions from separate projects by including the project.id in
       the digest.

     - if ctx.cross_branch_commits is False, we avoid combining CVS
       revisions from different branches by including the branch name
       in the digest.

     During the database creation phase, the database keeps track of a
     map

       digest (20-byte string) -> metadata_id (int)

     to allow the record for a set of metadata to be located
     efficiently.  As data are collected, it stores a map

       metadata_id (int as hex) -> (author, log_msg,) (tuple)

     into the database for use in future passes.  CVSRevision records
     include the metadata_id.

During this run, each file, symbol, CVSItem, and metadata record is
assigned an arbitrary unique ID that is used throughout the conversion
to refer to it.


CollateSymbolsPass
==================

Use the symbol statistics collected in CollectRevsPass and any runtime
options to determine which symbols should be treated as branches,
which as tags, and which symbols should be excluded from the
conversion altogether.

Create 'cvs2svn-symbols.pck', which contains a pickle of a list of
TypedSymbol (Branch, Tag, or ExcludedSymbol) instances indicating how
each symbol should be processed in the conversion.  The IDs used for a
TypedSymbol is the same as the ID allocated to the corresponding
symbol in CollectRevsPass, so references in CVSItems do not have to be
updated.


FilterSymbolsPass
=================

This pass works through the CVSItems stored in
'cvs2svn-cvs-items.pck', processing all of the items from each file
as a group.  It does the following things:

   - Exclude any symbols that CollateSymbolsPass determined should be
     excluded, and any revisions on such branches.  Also delete
     references from other CVSItems to those that are being deleted.

   - Transform any branches to tags or vice versa, also depending on
     the results of CollateSymbolsPass, and fix up the references from
     other CVSItems.

   - For each CVSRevision, record the list of symbols that the
     revision closes.

   - Write the surviving CVSItems to the indexed store in files
     'cvs2svn-cvs-items-filtered-index.pck' and
     'cvs2svn-cvs-items-filtered.pck'.

   - Write a summary of each surviving CVSRevision to
     'cvs2svn-revs-summary.txt'.  Each line of the file has the format

         METADATA_ID TIMESTAMP CVS_REVISION_ID

     where TIMESTAMP is a fixed-width timestamp.  These summaries will
     be sorted in SortRevisionSummaryPass then used by
     InitializeChangesetsPass to create first-draft changesets.

   - Write a summary of CVSSymbols to 'cvs2svn-symbols-summary.txt'.
     Each line of the file has the format

         SYMBOL_ID CVS_SYMBOL_ID

     This information will be sorted by SYMBOL_ID in
     SortSymbolSummaryPass then used to create preliminary
     SymbolChangesets.


SortRevisionSummaryPass
=======================

Sort the revision summary written by FilterSymbolsPass, creating
'cvs2svn-revs-summary-s.txt'.  The sort groups items that might be
added to the same changeset together and, within a group, sorts
revisions by timestamp.  This step makes it easy for
InitializeChangesetsPass to read the initial draft of changesets
straight from the file.


SortSymbolSummaryPass
=====================

Sort the symbol summary written by FilterSymbolsPass, creating
'cvs2svn-symbols-summary-s.txt'.  The sort groups together symbol
items that might be added to the same changeset.  The output of this
pass is used by InitializeChangesetsPass.


InitializeChangesetsPass
========================

This pass creates first-draft changesets, splitting them using
COMMIT_THRESHOLD and breaking up any revision changesets that have
internal dependencies.

The raw material for creating revision changesets is
'cvs2svn-revs-summary-s.txt', which already has CVSRevisions sorted in
such a way that potential changesets are grouped together and sorted
by date.  The contents of this file are read line by line, and the
corresponding CVSRevisions are accumulated into a changeset.  Whenever
the metadata_id changes, or whenever there is a time gap of more than
COMMIT_THRESHOLD (currently set to 5 minutes) between CVSRevisions,
then a new changeset is started.

At this point a revision changeset can have internal dependencies if
two commits were made to the same file with the same log message
within COMMIT_THRESHOLD of each other.  The next job of this pass is
to split up changesets in such a way to break such internal
dependencies.  This is done by sorting the CVSRevisions within a
changeset by timestamp, then choosing the split point that breaks the
most internal dependencies.  This procedure is continued recursively
until there are no more dependencies internal to a single changeset.

Analogously, the CVSSymbol items from 'cvs2svn-symbols-summary-s.txt'
are grouped into symbol changesets.  (Symbol changesets cannot have
internal dependencies, so there is no need to break them up at this
stage.)

The result of this pass is two databases:

   - 'cvs2svn-cvs-item-to-changeset.dat', which maps CVSItem ids to
     the id of the changeset containing the item, and

   - 'cvs2svn-changesets.pck' and 'cvs2svn-changesets-index.dat',
     which contain the changeset objects themselves, indexed by
     changeset id.


BreakRevisionChangesetCyclesPass
================================

There can still be cycles in the graph of changesets caused by:

   - Interleaved commits.  Since CVS commits are not atomic, it can
     happen that two commits are in progress at the same time and each
     alters the same two files, but in different orders.  These should
     be small cycles involving only a few revision changesets.  To
     resolve these cycles, one or more of the revision changesets have
     to be split up (eventually becoming separate svn commits).

   - Cycles involving a revision changeset formed by the accidental
     combination of unrelated items within a short period of time with
     the same digest.  These should also be be small cycles involving
     only a few changesets.

   - Split creation of branches.  The same branch tag can be added to
     different files at completely different times.  It is possible
     that the revision that is tagged later depends on a changeset
     that involves a file on the branch that was created earlier.
     These cycles can be large, but they always involve a symbol
     changeset.  To resolve these cycles, the symbol changeset should
     be split up into two changesets.

The job of this pass is to break up cycles of the first two types
(those involving only CVSRevisions).

This pass works by building up the graph of revision changesets and
their dependencies in memory, then attempting a topological sort of
the changesets.  Whenever the sort stalls, that implies the existence
of a cycle, one of which can easily be determined.  This cycle is broken
up through the use of heuristics that try to determine an "efficient"
way of splitting one or more of the changesets that are involved.

The new changesets are written to
'cvs2svn-cvs-item-to-changeset-revbroken.dat' and
'cvs2svn-changesets-revbroken.pck' and
'cvs2svn-changesets-revbroken-index.dat', which are in the same format
as the analogous files produced by InitializeChangesetsPass.


RevisionTopologicalSortPass
===========================

Topologically sort the RevisionChangesets, thereby picking the order
in which the RevisionChangesets will be committed.  (Since the
previous pass eliminated any dependency cycles, this sort is
guaranteed to succeed.)  Ambiguities in the topological sort are
resolved using the changesets' timestamps.  Then simplify the
changeset graph into a linear chain by converting each
RevisionChangeset into an OrderedChangeset that stores dependency
links only to its commit-order predecessor and successor.  This
simplified graph enforces the commit order that resulted from the
topological sort, even after the SymbolChangesets are added back into
the graph later.  Store the OrderedChangesets into
'cvs2svn-changesets-revsorted.pck' and
'cvs2svn-changesets-revsorted-index.dat' along with the unmodified
SymbolChangesets.


BreakAllChangesetCyclesPass
===========================

Read in the complete changeset graph and break any cycles in the
dependency graph by breaking up BranchChangesets.

At this stage, all cycles can be broken up by this mechanism because
(1) all CVSRevision dependency cycles were already broken in
BreakRevisionChangesetCyclesPass; (2) CVSTags cannot participate in
dependency cycles because no other CVSItem can depend on a CVSTag.

Since the input of this pass is the output of
RevisionTopologicalSortPass, all revision cycles have already been
broken up and the order that the RevisionChangesets will be committed
has been determined.  In this pass, the complete changeset graph is
created in memory, including the linear list of OrderedChangesets from
RevisionTopologicalSortPass plus all of the symbol changesets.
Because this pass doesn't break up any OrderedChangesets, it is
constrained to finding places within the revision changeset sequence
in which the symbol changeset commits can be inserted.

The new changesets are written to
'cvs2svn-cvs-item-to-changeset-symbroken.dat' and
'cvs2svn-changesets-symbroken.pck' and
'cvs2svn-changesets-symbroken-index.dat', which are in the same format
as the analogous files produced by InitializeChangesetsPass.


TopologicalSortPass
===================

Given that BreakRevisionChangesetCyclesPass and
BreakAllChangesetCyclesPass have broken up any dependency cycles among
the changesets, it is possible to order all of the changesets in such
a way that all of a changeset's dependencies are committed before the
changeset itself.  This pass does so by again building up the graph of
changesets in memory, then at each step picking a changeset that has
no remaining dependencies and removing it from the graph.  Whenever
more than one dependency-free changeset is available, symbol
changesets are chosen before revision changesets.  As changesets are
processed, the timestamp sequence is ensured to be monotonic by the
simple expedient of adjusting retrograde timestamps to be later than
their predecessor.  Timestamps that lie in the future, on the other
hand, are assumed to be bogus and are adjusted backwards, also to be
just later than their predecessor.

This pass writes a line to 'cvs2svn-changesets-s.txt' for each
RevisionChangeset, in the order that the changesets should be
committed.  Each lines contains

    CHANGESET_ID TIMESTAMP

where CHANGESET_ID is the id of the changeset and TIMESTAMP is the
timstamp that should be assigned to it when it is committed.  Both
values are written in hexadecimal.


CreateRevsPass (formerly called pass5)
==============

This pass generates SVNCommits from Changesets and records symbol
openings and closings.  (One Changeset can result in multiple
SVNCommits, for example if it causes symbols to be filled or copies to
a vendor branch.)

This pass does the following:

1. Creates a database file to map Subversion revision numbers to
   SVNCommit instances ('cvs2svn-svn-commits.db').  Creates another
   database file to map CVS Revisions to their Subversion Revision
   numbers ('cvs2svn-cvs-revs-to-svn-revnums.db').

2. When a file is copied to a symbolic name in cvs2svn, there is a
   range of valid Subversion revisions that we can copy the file from.
   The first valid Subversion revision number for a symbolic name is
   called the "opening", and the first *invalid* Subversion revision
   number encountered after the "opening" is called the "closing".  In
   this pass, the SymbolingsLogger class writes out a line to
   'cvs2svn-symbolic-names.txt' for each symbol opening or closing.
   Note that not every opening will have a corresponding closing.

   The format of each line is:

       SYMBOL_ID SVN_REVNUM TYPE BRANCH_ID CVS_FILE_ID

   For example:

       1c 234 O * 1a7
       34 245 O * 1a9
       18a 241 C 34 1a7
       122 201 O 7e 1b3

   Here is what the columns mean:

   SYMBOL_ID: The id of the branch or tag that starts or ends in this
              CVS Revision (there can be multiples per CVS rev).

   SVN_REVNUM: The Subversion revision number that is the opening or
               closing for this SYMBOLIC_NAME.

   TYPE: "O" for openings and "C" for closings.

   BRANCH_ID: The id of the branch where this opening or closing
              happened.  '*' denotes the default branch.

   CVS_FILE_ID: The ID of the CVS file where this opening or closing
                happened, in hexadecimal.

   See SymbolingsLogger for more details.


SortSymbolsPass (formerly called pass6)
===============

This pass merely sorts 'cvs2svn-symbolic-names.txt' into
'cvs2svn-symbolic-names-s.txt'.  This orders the file first by
symbolic name, and second by Subversion revision number, thus grouping
all openings and closings for each symbolic name together.


IndexSymbolsPass (formerly called pass7)
================

This pass iterates through all the lines in
'cvs2svn-symbolic-names-s.txt', writing out a database file
('cvs2svn-symbolic-name-offsets.db') mapping SYMBOL_ID to the file
offset in 'cvs2svn-symbolic-names-s.txt' where SYMBOL_ID is first
encountered.  This will allow us to seek to the various offsets in the
file and sequentially read only the openings and closings that we
need.


OutputPass (formerly called pass8)
==========

This pass opens the cvs2svn-svn-commits.db and, starting with
Subversion revision 2 (revision 1 creates /trunk, /tags, and
/branches), sequentially plays out all the commits to either a
Subversion repository or to a dumpfile.  It also decides what sources
to use to fill symbols.

In --dumpfile mode, the result of this pass is a Subversion repository
dumpfile (suitable for input to 'svnadmin load').  The dumpfile is the
data's last static stage: last chance to check over the data, run it
through svndumpfilter, move the dumpfile to another machine, etc.

When not in --dumpfile mode, no full dumpfile is created.  Instead,
miniature dumpfiles representing a single revisions are created,
loaded into the repository, and then removed.

In both modes, the dumpfile revisions are created by walking through
'cvs2svn-data.s-revs.txt'.

The databases 'cvs2svn-svn-nodes.db' and 'cvs2svn-svn-revisions.db'
form a skeletal (metadata only, no content) mirror of the repository
structure that cvs2svn is creating.  They provide data about previous
revisions that cvs2svn requires while constructing the dumpstream.


                  ===============================
                      Branches and Tags Plan.
                  ===============================

This pass is also where tag and branch creation is done.  Since
subversion does tags and branches by copying from existing revisions
(then maybe editing the copy, making subcopies underneath, etc), the
big question for cvs2svn is how to achieve the minimum number of
operations per creation.  For example, if it's possible to get the
right tag by just copying revision 53, then it's better to do that
than, say, copying revision 51 and then sub-copying in bits of
revision 52 and 53.

Tags are created as soon as cvs2svn encounters the last CVS Revision
that is a source for that tag.  The whole tag is created in one
Subversion commit.

Branches are created as soon as all of their prerequisites are in
place.  If a branch creation had to be broken up due to dependency
cycles, then non-final parts are also created as soon as their
prerequisites are ready.  In such a case, we create as much of the
branch as we can, that is, as much of it as there are source revisions
available to copy, and leave the rest for later.

How just-in-time branch creation works:

In order to make the "best" set of copies/deletes when creating a
branch, cvs2svn keeps track of two sets of trees while it's making
commits:

   1. A skeleton mirror of the subversion repository, that is, an
      array of revisions, with a tree hanging off each revision.  (The
      "array" is actually implemented as an anydbm database itself,
      mapping string representations of numbers to root keys.)

   2. A tree for each CVS symbolic name, and the svn file/directory
      revisions from which various parts of that tree could be copied.

Both tree sets live in anydbm databases, using the same basic schema:
unique keys map to marshal.dumps() representations of dictionaries,
which in turn map entry names to other unique keys:

   root_key  ==> { entryname1 : entrykey1, entryname2 : entrykey2, ... }
   entrykey1 ==> { entrynameX : entrykeyX, ... }
   entrykey2 ==> { entrynameY : entrykeyY, ... }
   entrykeyX ==> { etc, etc ...}
   entrykeyY ==> { etc, etc ...}

(The leaf nodes -- files -- are also dictionaries, for simplicity.)

The repository mirror allows cvs2svn to remember what paths exist in
what revisions.

For details on how branches and tags are created, please see the
docstring the SymbolingsLogger class (and its methods).

-*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*-
- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -
-*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*-

Some older notes and ideas about cvs2svn.  Not deleted, because they
may contain suggestions for future improvements in design.

-----------------------------------------------------------------------

An email from John Gardiner Myers <jgmyers@speakeasy.net> about some
considerations for the tool.

------
From: John Gardiner Myers <jgmyers@speakeasy.net>
Subject: Thoughts on CVS to SVN conversion
To: gstein@lyra.org
Date: Sun, 15 Apr 2001 17:47:10 -0700

Some things you may want to consider for a CVS to SVN conversion utility:

If converting a CVS repository to SVN takes days, it would be good for
the conversion utility to keep its progress state on disk.  If the
conversion fails halfway through due to a network outage or power
failure, that would allow the conversion to be resumed where it left off
instead of having to start over from an empty SVN repository.

It is a short step from there to allowing periodic updates of a
read-only SVN repository from a read/write CVS repository.  This allows
the more relaxed conversion procedure:

1) Create SVN repository writable only by the conversion tool.
2) Update SVN repository from CVS repository.
3) Announce the time of CVS to SVN cutover.
4) Repeat step (2) as needed.
5) Disable commits to CVS repository, making it read-only.
6) Repeat step (2).
7) Enable commits to SVN repository.
8) Wait for developers to move their workspaces to SVN.
9) Decomission the CVS repository.

You may forward this message or parts of it as you seem fit.
------

-----------------------------------------------------------------------

Further design thoughts from Greg Stein <gstein@lyra.org>

* timestamp the beginning of the process. ignore any commits that
  occur after that timestamp; otherwise, you could miss portions of a
  commit (e.g. scan A; commit occurs to A and B; scan B; create SVN
  revision for items in B; we missed A)

* the above timestamp can also be used for John's "grab any updates
  that were missed in the previous pass."

* for each file processed, watch out for simultaneous commits. this
  may cause a problem during the reading/scanning/parsing of the file,
  or the parse succeeds but the results are garbaged. this could be
  fixed with a CVS lock, but I'd prefer read-only access.

  algorithm: get the mtime before opening the file. if an error occurs
  during reading, and the mtime has changed, then restart the file. if
  the read is successful, but the mtime changed, then restart the
  file.

* use a separate log to track unique branches and non-branched forks
  of revision history (Q: is it possible to create, say, 1.4.1.3
  without a "real" branch?). this log can then be used to create a
  /branches/ directory in the SVN repository.

  Note: we want to determine some way to coalesce branches across
  files. It can't be based on name, though, since the same branch name
  could be used in multiple places, yet they are semantically
  different branches. Given files R, S, and T with branch B, we can
  tie those files' branch B into a "semantic group" whenever we see
  commit groups on a branch touching multiple files. Files that are
  have a (named) branch but no commits on it are simply ignored. For
  each "semantic group" of a branch, we'd create a branch based on
  their common ancestor, then make the changes on the children as
  necessary. For single-file commits to a branch, we could use
  heuristics (pathname analysis) to add these to a group (and log what
  we did), or we could put them in a "reject" kind of file for a human
  to tell us what to do (the human would edit a config file of some
  kind to instruct the converter).

* if we have access to the CVSROOT/history, then we could process tags
  properly. otherwise, we can only use heuristics or configuration
  info to group up tags (branches can use commits; there are no
  commits associated with tags)

* ideally, we store every bit of data from the ,v files to enable a
  complete restoration of the CVS repository. this could be done by
  storing properties with CVS revision numbers and stuff (i.e. all
  metadata not already embodied by SVN would go into properties)

* how do we track the "states"? I presume "dead" is simply deleting
  the entry from SVN. what are the other legal states, and do we need
  to do anything with them?

* where do we put the "description"? how about locks, access list,
  keyword flags, etc.

* note that using something like the SourceForge repository will be an
  ideal test case. people *move* their repositories there, which means
  that all kinds of stuff can be found in those repositories, from
  wherever people used to run them, and under whatever development
  policies may have been used.

  For example: I found one of the projects with a "permissions 644;"
  line in the "gnuplot" repository.  Most RCS releases issue warnings
  about that (although they properly handle/skip the lines), and CVS
  ignores RCS newphrases altogether.

# vim:tw=70
